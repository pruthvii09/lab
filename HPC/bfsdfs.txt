// Including necessary standard libraries
#include <iostream>     // For standard input and output operations like cout, cin
#include <vector>       // For using the vector container to represent adjacency lists
#include <queue>        // For using the queue container needed for BFS (Breadth-First Search)
#include <omp.h>        // For using OpenMP to enable parallel programming
#include <chrono>       // For measuring time durations of sequential and parallel BFS executions

using namespace std;     // To avoid writing 'std::' again and again
using namespace chrono;  // To directly use 'high_resolution_clock', 'microseconds', etc.

// ---------------------------------------------------------------------------------
// Defining the Graph class, which represents a graph structure using adjacency lists.
// An adjacency list is a compact way to represent a graph where each node stores a list of its neighbors.
// ---------------------------------------------------------------------------------
class Graph {
    int V;                      // Number of vertices (nodes) in the graph
    vector<vector<int>> adj;     // 'adj' is a vector of vectors, representing the adjacency list

public:
    Graph(int V);                // Constructor to initialize the graph with V vertices
    void addEdge(int v, int w);   // Function to add an edge between two vertices
    void sequentialBFS(int start); // Function to perform Breadth-First Search sequentially
    void parallelBFS(int start);   // Function to perform Breadth-First Search in parallel using OpenMP
};

// ---------------------------------------------------------------------------------
// Constructor implementation: Initializes a graph with V vertices
// ---------------------------------------------------------------------------------
Graph::Graph(int V) {
    this->V = V;          // Assign the passed number of vertices to the class member variable
    adj.resize(V);        // Resize the adjacency list to have V empty lists, one for each vertex
}

// ---------------------------------------------------------------------------------
// Function to add an undirected edge between vertex 'v' and vertex 'w'
// This means both 'v' is connected to 'w' and 'w' is connected to 'v'.
// ---------------------------------------------------------------------------------
void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);  // Add w to v’s list of adjacent vertices
    adj[w].push_back(v);  // Also add v to w’s list because the graph is undirected
}

// ---------------------------------------------------------------------------------
// Function to perform Sequential (normal) BFS Traversal starting from a given vertex
// BFS (Breadth-First Search) explores all nodes at the present depth before moving deeper.
// ---------------------------------------------------------------------------------
void Graph::sequentialBFS(int start) {
    vector<bool> visited(V, false);  // Create a visited array to track which vertices have been visited
    queue<int> q;                    // Queue to maintain the order of traversal

    visited[start] = true;  // Mark the starting node as visited
    q.push(start);          // Push the starting node into the queue to begin BFS

    cout << "Sequential BFS: ";

    // Standard BFS loop: runs until all reachable nodes are visited
    while (!q.empty()) {
        int u = q.front();  // Get the front element of the queue (current node)
        q.pop();            // Remove the element from the queue
        cout << u << " ";   // Output the current node

        // Traverse all adjacent vertices of u
        for (auto v : adj[u]) {
            if (!visited[v]) {       // If the adjacent vertex v is not visited
                visited[v] = true;    // Mark v as visited
                q.push(v);            // Add v to the queue for future exploration
            }
        }
    }
    cout << endl; // Move to the next line after completing traversal
}

// ---------------------------------------------------------------------------------
// Function to perform Parallel BFS Traversal starting from a given vertex
// Here, we introduce parallelism to speed up visiting multiple neighbors simultaneously using OpenMP.
// ---------------------------------------------------------------------------------
void Graph::parallelBFS(int start) {
    vector<bool> visited(V, false);  // Visited array to track already visited vertices
    queue<int> q;                    // Queue to maintain the traversal order

    visited[start] = true;  // Mark the starting vertex as visited
    q.push(start);          // Start BFS by pushing the start node

    cout << "Parallel BFS: ";

    // Run the BFS until there are no nodes left in the queue
    while (!q.empty()) {
        int qSize = q.size();          // Get the number of elements currently in the queue (nodes at current BFS level)
        vector<int> currentLevel;      // Temporary array to store all nodes of the current level

        // First step: Pull all elements of the current level from the queue
        for (int i = 0; i < qSize; i++) {
            int u = q.front();         // Get the node
            q.pop();                   // Remove it from the queue
            cout << u << " ";           // Print the node
            currentLevel.push_back(u); // Store it for parallel processing
        }

        // Second step: Now process all neighbors of nodes at the current level in parallel
        #pragma omp parallel for
        for (int i = 0; i < currentLevel.size(); i++) {
            int u = currentLevel[i];  // Get node from current level
            for (auto v : adj[u]) {   // Traverse all adjacent vertices
                #pragma omp critical  // Ensure only one thread updates shared resources at a time
                {
                    if (!visited[v]) {  // If the vertex hasn't been visited yet
                        visited[v] = true;  // Mark as visited
                        q.push(v);          // Add it to the queue for next level exploration
                    }
                }
            }
        }
    }
    cout << endl; // After BFS traversal, move to next line
}

// ---------------------------------------------------------------------------------
// Main function: Entry point of the program
// Handles user input, graph creation, and execution of both sequential and parallel BFS.
// Also measures and prints the execution time of both methods.
// ---------------------------------------------------------------------------------
int main() {
    int V, E;  // Variables to hold number of vertices and edges

    cout << "Enter number of vertices and edges: ";
    cin >> V >> E;  // Taking user input for number of vertices and edges

    Graph g(V); // Create a graph object with V vertices

    cout << "Enter edges (u v):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;     // Read two vertices representing an undirected edge
        g.addEdge(u, v);   // Add the edge to the graph
    }

    int start;   // Starting vertex for BFS
    cout << "Enter starting vertex: ";
    cin >> start; // Take input for starting vertex

    // ---------------------- Sequential BFS Execution ----------------------

    auto start_seq = high_resolution_clock::now();  // Record start time before calling sequential BFS
    g.sequentialBFS(start);                          // Perform sequential BFS traversal
    auto end_seq = high_resolution_clock::now();     // Record end time after sequential BFS
    auto duration_seq = duration_cast<microseconds>(end_seq - start_seq); // Calculate execution time
    cout << "Sequential BFS Time: " << duration_seq.count() << " microseconds" << endl;

    // ---------------------- Parallel BFS Execution ----------------------

    auto start_par = high_resolution_clock::now();  // Record start time before calling parallel BFS
    g.parallelBFS(start);                           // Perform parallel BFS traversal
    auto end_par = high_resolution_clock::now();    // Record end time after parallel BFS
    auto duration_par = duration_cast<microseconds>(end_par - start_par); // Calculate execution time
    cout << "Parallel BFS Time: " << duration_par.count() << " microseconds" << endl;

    return 0; // Return 0 indicating successful program termination
}




Enter the number of vertices in the graph: 5
Enter the number of edges in the graph: 6
Enter the edges (source destination):
0 1
0 2
1 2
1 3
2 4
3 4
Enter the starting vertex for BFS and DFS: 0




. What is BFS (Breadth-First Search)?
Answer:
BFS is a graph traversal algorithm where we explore all the neighbors of a node before moving to the next level neighbors.
It uses a queue (FIFO) and is useful for finding the shortest path in an unweighted graph.

2. What is DFS (Depth-First Search)?
Answer:
DFS is a graph traversal algorithm where we explore as far as possible along a branch before backtracking.
It uses a stack (LIFO) and is useful for pathfinding, detecting cycles, and solving puzzles like mazes.

3. Why is OpenMP parallelization risky in your BFS and DFS?
Answer:
Because the queue (in BFS) and stack (in DFS) are shared between threads, and updating them from multiple threads at the same time can cause race conditions and data corruption.
OpenMP should not be used on non-thread-safe structures unless protected by locks or critical sections.

4. What data structures are used in BFS and DFS in your code?
Answer:

BFS uses a queue (std::queue) to store vertices at the current level.

DFS uses a stack (std::stack) to explore as deep as possible before backtracking.

5. What is an adjacency list and why is it used?
Answer:
An adjacency list is a way to represent a graph where each vertex stores a list of its neighbors.
It uses less memory than an adjacency matrix, especially for sparse graphs (where most possible edges are missing).

6. Can BFS and DFS give different traversal outputs?
Answer:
Yes.
BFS explores level by level (wider first), while DFS explores depth first (deeper first), so their traversal orders are usually different.

7. Why are graphs undirected in your program?
Answer:
Because when we add an edge, we add it both ways:

from source to destination, and

from destination back to source.
So the graph is undirected, meaning both vertices know about the connection.

8. What changes would you make to perform a correct parallel BFS or DFS?
Answer:
To correctly parallelize, I would need to use thread-safe queues and stacks, or use critical sections, locks, or atomic operations to protect shared data.

9. What happens if we don’t mark a vertex as visited immediately?
Answer:
If we delay marking a vertex as visited, it might get added multiple times to the queue or stack, leading to infinite loops or wrong traversals.

Time Complexity:

O(V + E) for graph construction (addEdge calls),

O(V + E) for viewGraph,

O(V + E) for BFS,

O(V + E) for DFS.

So, total time = O(V + E).





