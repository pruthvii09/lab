#include <iostream>   // Provides std::cout and std::cin for console input/output
#include <ctime>      // Provides clock() for measuring CPU time and time() for seeding RNG
#include <cstdlib>    // Provides rand() and srand() for random number generation
#include <omp.h>      // Provides OpenMP pragmas and functions for parallel execution

using namespace std;  // Bring in standard namespace to avoid prefixing std:: everywhere

// --------------------------------------------------------------------------
// Function: bubbleSort
// Purpose : Sorts an integer array in ascending order using the classic
//           bubble sort algorithm, which repeatedly steps through the list,
//           compares adjacent elements, and swaps them if they are in the
//           wrong order. This is done until no swaps are needed, indicating
//           the list is sorted.
// Inputs  : arr[] - the array of integers to sort
//           n     - the number of elements in arr[]
// Complexity: O(n^2) in the worst and average case, O(n) best case (already sorted)
// --------------------------------------------------------------------------
void bubbleSort(int arr[], int n) {
    // Loop over each element in the array, except the last one (which will be in place)
    for (int i = 0; i < n - 1; ++i) {
        // In each pass, the largest unsorted element "bubbles" to its correct position
        for (int j = 0; j < n - i - 1; ++j) {
            // Compare adjacent elements
            if (arr[j] > arr[j + 1]) {
                // Swap them if they are in the wrong order
                swap(arr[j], arr[j + 1]);
            }
        }
        // After this inner loop, the element at index (n - i - 1) is guaranteed correct
    }
}

// --------------------------------------------------------------------------
// Function: printArray
// Purpose : Prints the contents of an integer array to the console,
//           separating elements with spaces, then outputs a newline.
// Inputs  : arr[] - the array of integers to print
//           size  - the number of elements in arr[]
// --------------------------------------------------------------------------
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";  // Print each element followed by a space
    }
    cout << endl;               // Print a newline at the end of the list
}

int main() {
    int n;  // Number of elements the user wants to sort

    // Prompt the user to enter the size of the array for sorting
    cout << "Enter size of array: " << endl;
    cin >> n;  // Read the user’s input into n

    // Dynamically allocate an array of size n on the heap
    int *arr = new int[n];

    // Seed the random number generator with the current time to ensure
    // different sequences of random numbers on each program run
    srand(time(0));

    // Fill the array with random integers in the range [0, 99]
    for (int i = 0; i < n; ++i) {
        arr[i] = rand() % 100;
    }

    // ----------------------------------------------------------------------
    // Measure and report the execution time for the sequential bubble sort
    // ----------------------------------------------------------------------
    clock_t start = clock();               // Capture CPU time before sorting
    bubbleSort(arr, n);                    // Perform the bubble sort sequentially
    clock_t end = clock();                 // Capture CPU time after sorting
    double sequentialBubbleTime =          // Calculate elapsed time in seconds
        double(end - start) / CLOCKS_PER_SEC;

    // Optionally print sorted array to verify correctness (uncomment if needed)
    // cout << "Sorted array (sequential): ";
    // printArray(arr, n);

    // ----------------------------------------------------------------------
    // Measure and report the execution time for the “parallel” bubble sort
    // using OpenMP. Note: This example naively calls the sort in parallel
    // but does not partition work, so threads compete on the same data.
    // This is for demonstration — real parallel bubble sort requires more
    // careful work division or a different parallel algorithm altogether.
    // ----------------------------------------------------------------------
    start = clock();                       // Capture CPU time before parallel section

    #pragma omp parallel                  // Begin an OpenMP parallel region
    {
        bubbleSort(arr, n);               // Each thread independently calls bubbleSort
    }

    end = clock();                         // Capture CPU time after parallel section
    double parallelBubbleSort =            // Calculate elapsed time in seconds
        double(end - start) / CLOCKS_PER_SEC;

    // ----------------------------------------------------------------------
    // Output the measured times for comparison
    // ----------------------------------------------------------------------
    cout << "Sequential Bubble Sort Time: " << sequentialBubbleTime << " seconds" << endl;
    cout << "Parallel Bubble Sort Time:   " << parallelBubbleSort   << " seconds" << endl;

    // Clean up dynamically allocated memory to avoid memory leaks
    delete[] arr;

    return 0;  // Return 0 indicates successful execution to the operating system
}










1. Why is Bubble Sort parallelization ineffective in your code?
Answer:
Because each thread is doing the same bubble sort work independently on the same array.
They are not dividing the work among themselves — so there is no real speedup, just redundant computation.

2. Why is Merge Sort better suited for parallelization?
Answer:
Merge Sort naturally divides the array into two halves.
Each half can be sorted independently and in parallel, making it very suitable for divide-and-conquer parallelism using OpenMP.

3. What is the time complexity of Bubble Sort and Merge Sort?
Answer:

Bubble Sort: O(n²) in worst and average case.

Merge Sort: O(n log n) in all cases (best, average, worst).

4. What does #pragma omp parallel sections do?
Answer:
It tells OpenMP to split different sections (like two recursive mergeSort calls) into separate threads and execute them in parallel.

5. What does #pragma omp single mean in your program?
Answer:
It tells OpenMP to let only one thread (out of many) execute the next block of code (starting the first mergeSort call).
After that, the recursion itself handles parallel work.

6. What are the advantages of Merge Sort compared to Bubble Sort?
Answer:

Merge Sort is faster (O(n log n) vs O(n²)).

Merge Sort can handle larger arrays efficiently.

Merge Sort is stable and parallelizable.

7. What are the disadvantages of Merge Sort?
Answer:

Merge Sort needs extra memory for temporary arrays (O(n) space complexity).

Slightly more complex to implement compared to Bubble Sort.

8. Why do we use srand(time(0)) before generating random numbers?
Answer:
srand(time(0)) initializes the random number generator with the current time, so that different random numbers are generated every time you run the program.

9. Why do we use delete[] arr at the end of the program?
Answer:
Because arr was allocated dynamically with new, and if we don't free it with delete[], it would cause a memory leak.